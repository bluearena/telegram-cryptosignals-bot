package analizator

// https://t.me/cryptomaxsignal
// ¬´CryptoMaxSignals¬ª
// #NEWS_VIP_INSIDE

import (
	"fmt"
	"regexp"
	"strings"
	"strconv"
)

var (
	// –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
	CryptoMaxSignalsNewsVIPInsideExample1 = `
¬´CryptoMaxSignals¬ª, [23.01.18 15:45]
#NEWS_VIP_INSIDE üéØ65%
–•–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–∞–∫ –∏ –≤ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ! üöÄ
#XVG - (HOLD) https://bittrex.com/Market/Index?MarketName=BTC-XVG
–ü–æ–∫—É–ø–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –Ω–∞ –£—Ä–æ–≤–Ω—è—Ö BUY: 0.00000650 - 0.00000800
–ü—Ä–æ–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –Ω–∞ –£—Ä–æ–≤–Ω—è—Ö SELL :  0.00000990 - 0.00001070 - 0.00001130
‚õîÔ∏è üìâ  Stop-Loss:  0.00000580 BTC
üÜò –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏: 5% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞`

	CryptoMaxSignalsNewsVIPInsideExample2 = `
¬´CryptoMaxSignals¬ª, [20.02.18 16:01]
#NEW_VIP_INSIDE
üìå#Bittrex
üîë #SWT - –û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∏ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ!
https://bittrex.com/Market/Index?MarketName=BTC-SWT
üìà–¶–µ–Ω–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É BUY : 0.00020000
üìà–¶–µ–Ω–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É BUY 0.00021000
 –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ–∫
 Take-Profit:   0.00025000
 Take-Profit:   0.00030000
 C—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫                                                                                                                                                                                                                                               Take-Profit:   0.00035000
 Take-Profit:   0.00040000
‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏: –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 5-10% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞.`
)

// –ù–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ –≤ —Ç–µ–ª–µ–≥–µ –ø–æ VIP_INSIDE
type CryptoMaxSignalsNewsVIPInsidePatterns struct {
	globalPatterns
}

var (
	// only for PrivateSignals: CryptoMaxSignalsExample1
	cryptoMaxSignalsNewsVIPInside = CryptoMaxSignalsNewsVIPInsidePatterns{
		globalPatterns: globalPatterns{
			sellPattern: "(fit|SELL)[: ]{0,}([0-9.,]{1,})",                     // SELL[ ]{1,}:[ ]{1,}([0-9]{1,})(\\D)([0-9]{1,})
			buyPattern:  "(–∫—É–ø|BUY)[: ]{0,}([0-9.,]{1,})",                      // BUY[ ]{0,}:[ ]{1,}([0-9]{1,})(\\D)([0-9]{1,})
			stopPattern: "Stop-Loss[ ]{0,}:[ ]{1,}([0-9]{1,})(\\D)([0-9]{1,})", // –µ–≥–æ –º–æ–∂–µ—Ç –∏ –Ω–µ –±—ã—Ç—å
			coinPattern: "(#[^(NEW)][A-Z]{1,6})",                               //   // #[A-Z]{1,}[ ]{1,}
		},
	}
)

func CryptoMaxSignalsNewsVIPInsideParser(message string) (err error, ok bool, coin string, buyPrice, sellPrice, stopPrice float64) {
	if !strings.Contains(message, "#NEWS_VIP_INSIDE") {
		fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser: regex created only for #NEWS_VIP_INSIDE ")
		return
	}
	fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser")
	var reCoin = regexp.MustCompile(cryptoMaxSignalsNewsVIPInside.coinPattern)
	var coins []string
	var reBuy = regexp.MustCompile(cryptoMaxSignalsNewsVIPInside.buyPattern)
	var buyPrices []string
	var reSell = regexp.MustCompile(cryptoMaxSignalsNewsVIPInside.sellPattern)
	var sellPrices []string
	var reStop = regexp.MustCompile(cryptoMaxSignalsNewsVIPInside.stopPattern)
	var stopPrices []string

	for _, coinStr := range reCoin.FindAllString(message, -1) {
		re := regexp.MustCompile("[A-Z1-9]+")
		coinStr = strings.Join(re.FindAllString(coinStr, -1), "")
		coins = append(coins, coinStr)
	}

	if len(coins) == 0 {
		fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser: cannot define coin by regex")
		return
	}
	coin = coins[0]

	for _, buyPriceStr := range reBuy.FindAllString(message, -1) {
		//buyPriceStr = strings.TrimPrefix(buyPriceStr, "–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É:")
		//if strings.Contains()
		buyPriceStr = buyPriceStr[strings.IndexAny(buyPriceStr, ",.")-1:]
		buyPriceStr = strings.TrimPrefix(buyPriceStr, "BUY")
		buyPriceStr = strings.TrimSpace(buyPriceStr)
		buyPriceStr = strings.TrimPrefix(buyPriceStr, ":")
		buyPriceStr = strings.TrimSpace(buyPriceStr)
		buyPriceStr = strings.Replace(buyPriceStr, ",", ".", 1)
		buyPrices = append(buyPrices, buyPriceStr)
	}
	if len(buyPrices) == 0 {
		fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser: cannot define buyPrice by regex: len(buyPrices) == 0")
		return
	} else {
		if buyPrice, err = strconv.ParseFloat(buyPrices[0], 64); err != nil {
			fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser buyPrice err = ", err)
			return
		}
	}

	for _, sellPriceStr := range reSell.FindAllString(message, -1) {
		sellPriceStr = strings.TrimPrefix(sellPriceStr, "SELL")
		sellPriceStr = strings.TrimSpace(sellPriceStr)
		sellPriceStr = strings.TrimPrefix(sellPriceStr, ":")
		sellPriceStr = strings.TrimSpace(sellPriceStr)
		sellPriceStr = strings.Replace(sellPriceStr, ",", ".", 1)
		sellPrices = append(sellPrices, sellPriceStr)
	}

	if len(sellPrices) == 0 {
		fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser: cannot define sellPrice by regex: len(sellPrices) == 0")
		return
	} else {
		if sellPrice, err = strconv.ParseFloat(sellPrices[0], 64); err != nil {
			fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser sellPrice err = ", err)
			return
		}
	}

	for _, stopPriceStr := range reStop.FindAllString(message, -1) {
		stopPriceStr = strings.TrimPrefix(stopPriceStr, "Stop-Loss")
		stopPriceStr = strings.TrimSpace(stopPriceStr)
		stopPriceStr = strings.TrimPrefix(stopPriceStr, ":")
		stopPriceStr = strings.TrimSpace(stopPriceStr)
		stopPriceStr = strings.Replace(stopPriceStr, ",", ".", 1)
		stopPrices = append(stopPrices, stopPriceStr)
	}

	if len(stopPrices) == 0 {
		fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser: cannot define stopPrice by regex: len(stopPrices) == 0 ")
	} else {
		if stopPrice, err = strconv.ParseFloat(stopPrices[0], 64); err != nil {
			fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser stopPrice err = ", err)
			return
		}
	}

	fmt.Println("||| CryptoMaxSignalsNewsVIPInsideParser coins[0], buyPrice, sellPrice, stopPrice = ", coins[0], buyPrice, sellPrice, stopPrice)
	return nil, true, coin, buyPrice, sellPrice, stopPrice
}
